/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


package PaquetePacientes;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import javax.swing.JOptionPane;

/**
 *
 * @author Usuario
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbNombre = new javax.swing.JLabel();
        lbNumero = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtNumero = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRead = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbNombre.setText("Nombre:");

        lbNumero.setText("Número:");

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        txtNumero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRead.setText("Read");
        btnRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCreate)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addComponent(btnRead)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(btnUpdate)
                        .addGap(25, 25, 25)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbNumero)
                            .addComponent(lbNombre))
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre)
                            .addComponent(txtNumero))))
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNumero)
                    .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnRead)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtNumeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        
        try{
            String newName = String.valueOf(txtNombre.getText());
            
            long newNumber = Long.parseLong(txtNumero.getText());
            
            String nameNumberString;
            String name;
            long number;
            int index;
            
            File file = new File("C:\\Users\\Usuario\\Documents\\GitHub\\pooactividad6\\files\\Pacientes.txt");
            
            if(file.exists() == false){
                file.createNewFile();
            }
            
            RandomAccessFile raf = new RandomAccessFile(file,"rw");
            boolean found = false;
            
            // Si el paciente existe
            while (raf.getFilePointer() < raf.length()){
                nameNumberString = raf.readLine();
                
                String[] lineSplit = nameNumberString.split("!");
                
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);
                
                if(name.equals(newName)||number==newNumber){
                    found = true;
                    break;                    
                }
            }// Termina si el paciente existe
            
            if (found == false){
                
                //Ingresar al bloque If cuando un registro no está presente en el archivo
                nameNumberString = newName + "!" + String.valueOf(newNumber);
                
                // Para escribir un String como una secuencia de bytes
                raf.writeBytes(nameNumberString);
                
                // Para insertar el siguiente registro en una nueva línea
                raf.writeBytes(System.lineSeparator());
                
                // Imprimir mensaje
                // System.out.println(" Paciente agregado. ");
                JOptionPane.showMessageDialog(null, " Paciente agregado. ");
                // Cerrando los recursos
                raf.close();
                
            }
            // El contacto para ser actualizado podría no haber sido encontrado
            else{
                //Cerrando los recursos
                raf.close();
                
                //System.out.println(" El paciente ya existe. ");
                JOptionPane.showMessageDialog(null, "El paciente ya existe");
            }
        
            
        }
        
        catch (IOException ioe){
                //System.out.println(ioe);
                JOptionPane.showMessageDialog(null, "Error");
                txtNombre.setText("");
                txtNumero.setText("");
                
                }
        
        catch (NumberFormatException nef){
                //System.out.println(nef);
                JOptionPane.showMessageDialog(null, "Error");
                txtNombre.setText("");
                txtNumero.setText("");
                }       
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadActionPerformed
        try{
            
            String nameNumberString;
            String name;
            String newName = String.valueOf(txtNombre.getText());
            
            long number;
            int index;
            
            File file = new File("C:\\Users\\Usuario\\Documents\\GitHub\\pooactividad6\\files\\Pacientes.txt");
            
            if(!file.exists()){
                //Crea el archivo si no existe
                file.createNewFile();
            }
            //Se abre el archivo en modo de Lectura y Escritura
            
            RandomAccessFile raf = new RandomAccessFile(file,"rw");
            boolean found = false;
            
            while(raf.getFilePointer() < raf.length()){
                //leyendo lína desde el archivo
                nameNumberString = raf.readLine();
                
                String[] lineSplit = nameNumberString.split("!");
                
                //Se separan las columnas
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);
                
                if(name.equals(newName)){
                    
                    txtNombre.setText(String.valueOf(name));
                    txtNumero.setText(String.valueOf(number));
                    
                    raf.close();
                        found = true;
                    
                }
                
                
                
                
                
            }
            
            if(found == false){
                raf.close();
                txtNombre.setText("");
                txtNumero.setText("");
                JOptionPane.showMessageDialog(null, "El contacto no existe");
                    
            }
                
            
            
            
        }
        catch(IOException ioe){
            //System.out.println(ioe);
            JOptionPane.showMessageDialog(null, "Error");
        }
        
        catch(NumberFormatException nef){
            //System.out.println(nef);
            JOptionPane.showMessageDialog(null, "Error");
        }
            // TODO add your handling code here:
    }//GEN-LAST:event_btnReadActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
             // TODO add your handling code here:
        
        try{
            String newName = txtNombre.getText();
            long newNumber = Long.parseLong(txtNumero.getText());
            
            String nameNumberString;
            String name;
            int index;
            long number;
            
            File file = new File("C:\\Users\\Usuario\\Documents\\GitHub\\pooactividad6\\files\\Pacientes.txt");
            if(!file.exists()){
                file.createNewFile();
            }
            
            RandomAccessFile raf = new RandomAccessFile(file,"rw");
            boolean found = false;
            
            while (raf.getFilePointer() < raf.length()){
                nameNumberString = raf.readLine();
                String[] lineSplit = nameNumberString.split("!");
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);
                
                if(name.equals(newName) && number == newNumber){
                    found = true;
                    break;
                }
            }
            
            if(found == true){
                //Se utiliza un archivo temporal
                File tmpFile = new File("temp.txt");
                
                //Tal archivo se abre en modo lectura y escritura
                RandomAccessFile tmpraf = new RandomAccessFile(tmpFile,"rw");
                
                // Se inicia el apuntador para comenzar
                raf.seek(0);
                
                while(raf.getFilePointer()<raf.length()){
                    nameNumberString = raf.readLine();
                    
                    String[] lineSplit2 = nameNumberString.split("!");
                    
                    name = lineSplit2[0];
                    number = Long.parseLong(lineSplit2[1]);
                    
                    if(name.equals(newName)&&number==newNumber){
                        continue;
                    }
                    
                    tmpraf.writeBytes(nameNumberString);
                    tmpraf.writeBytes(System.lineSeparator());
                }
                raf.seek(0);
                tmpraf.seek(0);
                
                while(tmpraf.getFilePointer()<tmpraf.length()){
                    raf.writeBytes(tmpraf.readLine());
                    raf.writeBytes(System.lineSeparator());
                }
                raf.setLength(tmpraf.length());
                
                tmpraf.close();
                raf.close();
                
                tmpFile.delete();
                JOptionPane.showMessageDialog(null,"Paciente eliminado",
                        "INFORMATION_MESSAGE",JOptionPane.INFORMATION_MESSAGE);
                txtNombre.setText("");
                txtNumero.setText("");
                
                
            }
            
            else{
                raf.close();
                
                JOptionPane.showMessageDialog(null,"El paciente no existe",
                        "INFORMATION_MESSAGE",JOptionPane.INFORMATION_MESSAGE);
                
            }
            
            
            
            
            
            
        }
        catch(IOException ioe){
            System.out.println(ioe);
            
        }
             
        catch(NumberFormatException nef){
            System.out.println(nef);
        }
             
             
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
            try {

                // Get the name of the contact to be updated
                // from the Command line argument
                String newName = txtNombre.getText();

                // Get the number to be updated
                // from the Command line argument
                long newNumber = Long.parseLong(txtNumero.getText());

                String nameNumberString;
                String name;
                long number;
                int index;

                // Using file pointer creating the file.
                File file = new File("C:\\Users\\Usuario\\Documents\\GitHub\\pooactividad6\\files\\Pacientes.txt");

                if (!file.exists()) {

                    // Create a new file if not exists.
                    file.createNewFile();
                }

                // Opening file in reading and write mode.
                RandomAccessFile raf = new RandomAccessFile(file, "rw");
                boolean found = false;

                // Checking whether the name
                // of contact already exists.
                // getFilePointer() give the current offset
                // value from start of the file.
                while (raf.getFilePointer() < raf.length()) {

                    // reading line from the file.
                    nameNumberString = raf.readLine();

                    // splitting the string to get name and
                    // number
                    String[] lineSplit = nameNumberString.split("!");

                    // separating name and number.
                    name = lineSplit[0];
                    number = Long.parseLong(lineSplit[1]);

                    // if condition to find existence of record.
                    if (name.equals(newName) || number == newNumber) {
                        found = true;
                        break;
                    }
                }

                // Update the contact if record exists.
                if (found == true) {

                    // Creating a temporary file
                    // with file pointer as tmpFile.
                    File tmpFile = new File("temp.txt");

                    // Opening this temporary file
                    // in ReadWrite Mode
                    RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");

                    // Set file pointer to start
                    raf.seek(0);

                    // Traversing the friendsContact.txt file
                    while (raf.getFilePointer()< raf.length()) {

                        // Reading the contact from the file
                        nameNumberString = raf.readLine();

                        index = nameNumberString.indexOf('!');
                        name = nameNumberString.substring(
                            0, index);

                        // Check if the fetched contact
                        // is the one to be updated
                        if (name.equals(newName)) {

                            // Update the number of this contact
                            nameNumberString
                                = name + "!"
                                  + String.valueOf(newNumber);
                        }

                        // Add this contact in the temporary
                        // file
                        tmpraf.writeBytes(nameNumberString);

                        // Add the line separator in the
                        // temporary file
                        tmpraf.writeBytes(
                            System.lineSeparator());
                    }

                    // The contact has been updated now
                    // So copy the updated content from
                    // the temporary file to original file.

                    // Set both files pointers to start
                    raf.seek(0);
                    tmpraf.seek(0);

                    // Copy the contents from
                    // the temporary file to original file.
                    while (tmpraf.getFilePointer()
                           < tmpraf.length()) {
                        raf.writeBytes(tmpraf.readLine());
                        raf.writeBytes(System.lineSeparator());
                    }

                    // Set the length of the original file
                    // to that of temporary.
                    raf.setLength(tmpraf.length());

                    // Closing the resources.
                    tmpraf.close();
                    raf.close();

                    // Deleting the temporary file
                    tmpFile.delete();

                    System.out.println(" Friend updated. ");
                }

                // The contact to be updated
                // could not be found
                else {

                    // Closing the resources.
                    raf.close();

                    // Print the message
                    System.out.println(" Input name"
                                       + " does not exists. ");
                }
            }

            catch (IOException ioe) {
                System.out.println(ioe);
            }

            catch (NumberFormatException nef) {
                System.out.println(nef);
            }




    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRead;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel lbNombre;
    private javax.swing.JLabel lbNumero;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumero;
    // End of variables declaration//GEN-END:variables
}
